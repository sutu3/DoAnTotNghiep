services:
  mysql:
    image: mysql:8.0
    container_name: warehouse-mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: warehouse_db
      MYSQL_USER: root
      MYSQL_PASSWORD: root
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - warehouse-network
    command: --max_connections=300
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
  kafka:
    image: bitnami/kafka:3.5
    container_name: warehouse-kafka
    ports:
      - "9092:9092"
      - "9094:9094"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=EXTERNAL://localhost:9094,PLAINTEXT://kafka:9092
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_KRAFT_CLUSTER_ID=LelM2dIFQkiUFvXCEcqRWA
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_HEAP_OPTS=-Xmx512M -Xms256M
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_LOG_RETENTION_MS=604800000
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_NODE_ID=1
    volumes:
      - kafka_data:/bitnami/kafka
    networks:
      - warehouse-network
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--list", "--bootstrap-server", "localhost:9092"]
      interval: 5s
      timeout: 10s
      retries: 10

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: warehouse-kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: warehouse-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      DYNAMIC_CONFIG_ENABLED: 'true'
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - warehouse-network

  user-service:
    build:
      context: ./BackEnd/UserService
      dockerfile: Dockerfile
    container_name: user-service
    ports:
      - "8081:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SERVER_PORT=8080
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - warehouse-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  warehouse-service:
    build:
      context: ./BackEnd/Warehouse
      dockerfile: Dockerfile
    container_name: warehouse-service
    ports:
      - "8082:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SERVER_PORT=8080
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - warehouse-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  product-service:
    build:
      context: ./BackEnd/ProductService
      dockerfile: Dockerfile
    container_name: product-service
    ports:
      - "8083:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SERVER_PORT=8080
      - WAREHOUSE_SERVICE_URL=http://warehouse-service:8080
      - USER_SERVICE_URL=http://user-service:8080
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - warehouse-network
    restart: unless-stopped
  authen-service:
    build:
      context: ./BackEnd/AuthenService
      dockerfile: Dockerfile
    container_name: authen-service
    ports:
      - "8088:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SERVER_PORT=8080
      - WAREHOUSE_SERVICE_URL=http://warehouse-service:8080
      - USER_SERVICE_URL=http://user-service:8080
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - warehouse-network
    restart: unless-stopped
  gateway-service:
    build:
      context: ./BackEnd/GateWayService
      dockerfile: Dockerfile
    container_name: gateway-service
    ports:
      - "8888:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SERVER_PORT=8080
      - WAREHOUSE_SERVICE_URL=http://warehouse-service:8080
      - USER_SERVICE_URL=http://user-service:8080
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - warehouse-network
    restart: unless-stopped
  file-service:
    build:
      context: ./BackEnd/FileService
      dockerfile: Dockerfile
    container_name: file-service
    ports:
      - "8084:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SERVER_PORT=8080
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - warehouse-network
    restart: unless-stopped

  order-service:
    build:
      context: ./BackEnd/Order
      dockerfile: Dockerfile
    container_name: order-service
    ports:
      - "8085:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SERVER_PORT=8080
      - WAREHOUSE_SERVICE_URL=http://warehouse-service:8080
      - USER_SERVICE_URL=http://user-service:8080
      - PRODUCT_SERVICE_URL=http://product-service:8080
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - warehouse-network
    restart: unless-stopped

  redis-service:
    build:
      context: ./BackEnd/RedisService
      dockerfile: Dockerfile
    container_name: redis-service
    ports:
      - "8087:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATA_REDIS_HOST=redis-16525.c8.us-east-1-3.ec2.redns.redis-cloud.com
      - SPRING_DATA_REDIS_PORT=16525
      - SPRING_DATA_REDIS_USERNAME=default
      - SPRING_DATA_REDIS_PASSWORD=iTWzT8rgOuxvHBx3J5p4DVk4crq98IWC
      - SPRING_DATA_REDIS_SSL_ENABLED=true
      - SERVER_PORT=8080
    networks:
      - warehouse-network
    restart: unless-stopped

  inventory-service:
    build:
      context: ./BackEnd/InventoryService
      dockerfile: Dockerfile
    container_name: inventory-service
    ports:
      - "8086:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SERVER_PORT=8080
      - WAREHOUSE_SERVICE_URL=http://warehouse-service:8080
      - USER_SERVICE_URL=http://user-service:8080
      - PRODUCT_SERVICE_URL=http://product-service:8080
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - warehouse-network
    restart: unless-stopped

networks:
  warehouse-network:
    driver: bridge

volumes:
  mysql_data:
  kafka_data:
  redis_data: